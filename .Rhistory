"meanSulfur", "totOpTime", "totHeatInput", "Phase2")]
y = dat$PM
Xt_train = X[dat$ScrubbedFacility == 1, ]
yt_train = y[dat$ScrubbedFacility == 1]
Xt_test = X[dat$ScrubbedFacility == 0, ]
Xc_train = X[dat$ScrubbedFacility == 0, ]
yc_train = y[dat$ScrubbedFacility == 0]
Xc_test = X[dat$ScrubbedFacility == 1, ]
bart_model_treated <- bart(Xt_train, yt_train, x.test = Xt_test)
bart_model_control <- bart(Xc_train, yc_train, x.test = Xc_test)
posterior_preds <- bart_model_treated$yhat.train.mean
# Calculate residuals
residuals <- treated_data$PM - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
posterior_preds <- bart_model_control$yhat.train.mean
# Calculate residuals
residuals <- control_data$PM - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
X = matched_data[, c("TotPop", "PctUrban", "PctWhite", "PctBlack", "PctHisp",
"PctHighSchool", "MedianHHInc", "PctPoor", "PctOccupied",
"meanSulfur", "totOpTime", "totHeatInput", "Phase2")]
y = matched_data$PM
Xt_train = X[dat$ScrubbedFacility == 1, ]
yt_train = y[dat$ScrubbedFacility == 1]
Xt_test = X[dat$ScrubbedFacility == 0, ]
Xc_train = X[dat$ScrubbedFacility == 0, ]
yc_train = y[dat$ScrubbedFacility == 0]
Xc_test = X[dat$ScrubbedFacility == 1, ]
bart_model_treated <- bart(Xt_train, yt_train, x.test = Xt_test)
X = matched_data[, c("TotPop", "PctUrban", "PctWhite", "PctBlack", "PctHisp",
"PctHighSchool", "MedianHHInc", "PctPoor", "PctOccupied",
"meanSulfur", "totOpTime", "totHeatInput", "Phase2")]
y = matched_data$PM
X
dim(X)
Xt_train = X[dat$ScrubbedFacility == 1, ]
yt_train = y[dat$ScrubbedFacility == 1]
Xt_test = X[dat$ScrubbedFacility == 0, ]
Xc_train = X[dat$ScrubbedFacility == 0, ]
yc_train = y[dat$ScrubbedFacility == 0]
Xc_test = X[dat$ScrubbedFacility == 1, ]
bart_model_treated <- bart(Xt_train, yt_train, x.test = Xt_test)
X = matched_data[, c("TotPop", "PctUrban", "PctWhite", "PctBlack", "PctHisp",
"PctHighSchool", "MedianHHInc", "PctPoor", "PctOccupied",
"meanSulfur", "totOpTime", "totHeatInput", "Phase2")]
y = matched_data$PM
Xt_train = X[matched_data$ScrubbedFacility == 1, ]
yt_train = y[matched_data$ScrubbedFacility == 1]
Xt_test = X[matched_data$ScrubbedFacility == 0, ]
Xc_train = X[matched_data$ScrubbedFacility == 0, ]
yc_train = y[matched_data$ScrubbedFacility == 0]
Xc_test = X[matched_data$ScrubbedFacility == 1, ]
bart_model_treated <- bart(Xt_train, yt_train, x.test = Xt_test)
bart_model_control <- bart(Xc_train, yc_train, x.test = Xc_test)
# Get posterior predictions
posterior_preds <- bart_model_treated$yhat.train.mean
# Calculate residuals
residuals <- treated_data$PM - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
# Get posterior predictions
posterior_preds <- bart_model_control$yhat.train.mean
# Calculate residuals
residuals <- control_data$PM - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
# Get posterior predictions
posterior_preds <- bart_model_treated$yhat.train.mean
# Calculate residuals
residuals <- yt_train$PM - posterior_preds
# Get posterior predictions
posterior_preds <- bart_model_treated$yhat.train.mean
# Calculate residuals
residuals <- yt_train - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
# Get posterior predictions
posterior_preds <- bart_model_control$yhat.train.mean
# Calculate residuals
residuals <- yc_train - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
X = dat[, c("TotPop", "PctUrban", "PctWhite", "PctBlack", "PctHisp",
"PctHighSchool", "MedianHHInc", "PctPoor", "PctOccupied",
"meanSulfur", "totOpTime", "totHeatInput", "Phase2")]
y = dat$PM
Xt_train = X[dat$ScrubbedFacility == 1, ]
yt_train = y[dat$ScrubbedFacility == 1]
Xt_test = X[dat$ScrubbedFacility == 0, ]
Xc_train = X[dat$ScrubbedFacility == 0, ]
yc_train = y[dat$ScrubbedFacility == 0]
Xc_test = X[dat$ScrubbedFacility == 1, ]
bart_model_treated <- bart(Xt_train, yt_train, x.test = Xt_test)
bart_model_control <- bart(Xc_train, yc_train, x.test = Xc_test)
# Get posterior predictions
posterior_preds <- bart_model_treated$yhat.train.mean
# Calculate residuals
residuals <- yt_train - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
# Get posterior predictions
posterior_preds <- bart_model_control$yhat.train.mean
# Calculate residuals
residuals <- yc_train - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
bart_model_treated$yhat.test
bart_model_treated$yhat.test.mean
a  = bart_model_treated$yhat.test.mean
length(a)
mean(a)
a1 = mean(bart_model_treated$yhat.test.mean)
a2 = mean(bart_model_control$yhat.test.mean)
a1 - a2
a2 - a
a2 - a1
a
length(a)
length(bart_model_treated$yhat.test.mean)
length(bart_model_control$yhat.test.mean)
a1
a2
a1 - a2
mean(bart_model_treated$yhat.train.mean) - mean(bart_model_treated$yhat.test.mean)
mean(bart_model_control$yhat.test.mean) - mean(bart_model_control$yhat.train.mean)
a1 = mean(bart_model_treated$yhat.test.mean)
a2 = mean(bart_model_control$yhat.test.mean)
a2 - a1
a1 - a2
X = matched_data[, c("TotPop", "PctUrban", "PctWhite", "PctBlack", "PctHisp",
"PctHighSchool", "MedianHHInc", "PctPoor", "PctOccupied",
"meanSulfur", "totOpTime", "totHeatInput", "Phase2")]
y = matched_data$PM
Xt_train = X[matched_data$ScrubbedFacility == 1, ]
yt_train = y[matched_data$ScrubbedFacility == 1]
Xt_test = X[matched_data$ScrubbedFacility == 0, ]
Xc_train = X[matched_data$ScrubbedFacility == 0, ]
yc_train = y[matched_data$ScrubbedFacility == 0]
Xc_test = X[matched_data$ScrubbedFacility == 1, ]
bart_model_treated <- bart(Xt_train, yt_train, x.test = Xt_test)
bart_model_control <- bart(Xc_train, yc_train, x.test = Xc_test)
# Get posterior predictions
posterior_preds <- bart_model_treated$yhat.train.mean
# Calculate residuals
residuals <- yt_train - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
# Get posterior predictions
posterior_preds <- bart_model_control$yhat.train.mean
# Calculate residuals
residuals <- yc_train - posterior_preds
# Compute posterior mean estimate of the residual standard error
sqrt(mean(residuals^2))
a1 = mean(bart_model_treated$yhat.test.mean)
a2 = mean(bart_model_control$yhat.test.mean)
a1
a2
a1 - a2
mean(bart_model_treated$yhat.train.mean) - mean(bart_model_treated$yhat.test.mean)
mean(bart_model_control$yhat.test.mean) - mean(bart_model_control$yhat.train.mean)
a2 - a1
bart_model_treated$yhat.train.mean - bart_model_control$yhat.train.mean
bart_model_treated$yhat.test.mean - bart_model_control$yhat.test.mean
mean(bart_model_treated$yhat.test.mean - bart_model_control$yhat.test.mean)
sd(bart_model_treated$yhat.test.mean - bart_model_control$yhat.test.mean)
X1 = X
X1$Z = matched_data$ScrubbedFacility
bart_model_treated <- bart(X1, yt_train)
X1
dim(X1)
yt_train
bart_model_treated <- bart(X1, y)
dif = bart_model_treated$yhat.train.mean[X1$Z == 1] - bart_model_treated$yhat.train.mean[X1$Z == 0]
dif
mean(dif)
sd(dif)
setwd('/Users/datn/research/DL_paper_final')
require(data.table)
require(ggplot2)
library(dplyr)
library(tidyr)
df = fread('out_tables/model_performance.csv')
df = as.data.frame(df)
df$LR = as.character(df$LR)
df$LR[df$LR == "0.001"] = "1e-03"
df$LR = factor(df$LR, levels = c("1e-03", "5e-04", "1e-04", "5e-05"))
## AUROC
auroc = ggplot(df, aes(x = LR, y = auroc, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUROC") +
scale_y_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2")
df
View(df)
## AUPR
aupr = ggplot(df, aes(x = LR, y = aupr, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUPR") +
scale_y_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2")
aupr
aupr = ggplot(df, aes(x = LR, y = aupr, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUPR") +
scale_y_continuous() +
scale_fill_brewer(palette = "Set2")
aupr
# Compute the median values
median_table_aupr <- df %>%
group_by(LR, Method, Spec) %>%
summarize(Median_AUPR = median(aupr, na.rm = TRUE)) %>%
arrange(LR, Spec, Method)
# Display the table
print(median_table_aupr)
View(median_table_aupr)
wide_median_table_aupr <- median_table_auroc %>%
pivot_wider(names_from = Method, values_from = Median_AUROC) %>% arrange(Spec)
wide_median_table_aupr <- median_table_aupr %>%
pivot_wider(names_from = Method, values_from = Median_AUPR) %>% arrange(Spec)
wide_median_table_aupr
View(wide_median_table_aupr)
View(round(wide_median_table_aupr, 4))
View(round(wide_median_table_aupr, 4))
wide_median_table_aupr <- median_table_aupr %>%
pivot_wider(names_from = Method, values_from = Median_AUPR) %>% arrange(Spec)
View(wide_median_table_aupr)
wide_median_table_aupr$DanQ > wide_median_table_aupr$DeepSEA
setwd('/Users/datn/research/DL_paper_final')
require(data.table)
require(ggplot2)
library(dplyr)
library(tidyr)
df = fread('out_tables/model_performance.csv')
df = as.data.frame(df)
df$LR = as.character(df$LR)
df$LR[df$LR == "0.001"] = "1e-03"
df$LR = factor(df$LR, levels = c("1e-03", "5e-04", "1e-04", "5e-05"))
## AUROC
auroc = ggplot(df, aes(x = LR, y = auroc, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUROC") +
scale_y_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2")
# Compute the median values
median_table_auroc <- df %>%
group_by(LR, Method, Spec) %>%
summarize(Median_AUROC = median(auroc, na.rm = TRUE)) %>%
arrange(LR, Spec, Method)
# Display the table
print(median_table_auroc)
wide_median_table_auroc <- median_table_auroc %>%
pivot_wider(names_from = Method, values_from = Median_AUROC) %>% arrange(Spec)
# Optionally save the table to a CSV file
write.csv(wide_median_table_auroc, "out_tables_R1/Sup_Tab1_median_auroc.csv", row.names = FALSE)
setwd('/Users/datn/research/DL_paper_final')
require(data.table)
require(ggplot2)
library(dplyr)
library(tidyr)
df = fread('out_tables/model_performance.csv')
df = as.data.frame(df)
df$LR = as.character(df$LR)
df$LR[df$LR == "0.001"] = "1e-03"
df$LR = factor(df$LR, levels = c("1e-03", "5e-04", "1e-04", "5e-05"))
## AUROC
auroc = ggplot(df, aes(x = LR, y = auroc, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUROC") +
scale_y_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2")
# Compute the median values
median_table_auroc <- df %>%
group_by(LR, Method, Spec) %>%
summarize(Median_AUROC = median(auroc, na.rm = TRUE)) %>%
arrange(LR, Spec, Method)
# Display the table
print(median_table_auroc)
wide_median_table_auroc <- median_table_auroc %>%
pivot_wider(names_from = Method, values_from = Median_AUROC) %>% arrange(Spec)
# Optionally save the table to a CSV file
write.csv(wide_median_table_auroc, "out_tables_R1/Sup_Tab1_median_auroc.csv", row.names = FALSE)
pdf("out_figs_R1/Fig2.pdf", width = 8, height = 5.5)
auroc
dev.off()
## AUPR
aupr = ggplot(df, aes(x = LR, y = aupr, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUPR") +
scale_y_continuous() +
scale_fill_brewer(palette = "Set2")
# Compute the median values
median_table_aupr <- df %>%
group_by(LR, Method, Spec) %>%
summarize(Median_AUPR = median(aupr, na.rm = TRUE)) %>%
arrange(LR, Spec, Method)
# Display the table
print(median_table_aupr)
wide_median_table_aupr <- median_table_aupr %>%
pivot_wider(names_from = Method, values_from = Median_AUPR) %>% arrange(Spec)
# Optionally save the table to a CSV file
write.csv(median_table_aupr, "out_tables_R1/Sup_Tab2_median_aupr.csv", row.names = FALSE)
### export figs
pdf("out_figs_R1/Sup_Fig1.pdf", width = 8, height = 5.5)
auroc
dev.off()
pdf("out_figs_R1/Sup_Fig1.pdf", width = 8, height = 5.5)
aupr
dev.off()
## Export best learning rates for DanQ
best_lr <- median_table_auroc %>%
filter(Method == "DanQ") %>%
group_by(Spec) %>%
filter(Median_AUROC == max(Median_AUROC)) %>%
arrange(Spec)
write.csv(best_lr, "out_tables_R1/Sup_Tab3_best_LR_DanQ.csv", row.names = FALSE)
filter_dataframe <- function(df, LR, Method, Spec) {
pick <- (df$LR == LR) & (df$Method == Method) & (df$Spec == Spec)
return(df[pick, ])
}
df_best <- rbind(
filter_dataframe(df, "5e-05", "DanQ", "Cattle"),
filter_dataframe(df, "1e-04", "DanQ", "Chicken"),
filter_dataframe(df, "5e-04", "DanQ", "Pig"),
filter_dataframe(df, "5e-05", "DanQ", "Salmon")
)
### AUC by track types
f2 = ggplot(df_best, aes(y = Type, x = auroc, fill = Type)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.2, fill="white")+
facet_wrap(~Spec) +
theme_light() +
labs(x = "AUROC",
y = "Data type") +
scale_x_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2") +
theme(legend.position = "none")
pdf("out_figs/Sup_Fig2.pdf", width = 8, height = 5.5)
f2
dev.off()
f3 = ggplot(df_best, aes(y = Type, x = aupr, fill = Type)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.2, fill="white")+
facet_wrap(~Spec) +
theme_light() +
labs(x = "AUROC",
y = "Data type") +
scale_x_continuous() +
scale_fill_brewer(palette = "Set2") +
theme(legend.position = "none")
f3
### AUPR by track types
f3 = ggplot(df_best, aes(y = Type, x = aupr, fill = Type)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.2, fill="white")+
facet_wrap(~Spec) +
theme_light() +
labs(x = "AUPR",
y = "Data type") +
scale_x_continuous() +
scale_fill_brewer(palette = "Set2") +
theme(legend.position = "none")
pdf("out_figs/Sup_Fig3.pdf", width = 8, height = 5.5)
f3
dev.off()
f2
median_table_auroc
best_lr
## Export best learning rates for DanQ
combine_tab = median_table_auroc
combine_tab$Median_AUPR = median_table_aupr$Median_AUPR
best_lr <- median_table_auroc %>%
filter(Method == "DanQ") %>%
group_by(Spec) %>%
filter(Median_AUROC == max(Median_AUROC)) %>%
arrange(Spec)
best_lr
best_lr <- combine_tab %>%
filter(Method == "DanQ") %>%
group_by(Spec) %>%
filter(Median_AUROC == max(Median_AUROC)) %>%
arrange(Spec)
best_lr
best_lr <- combine_tab %>%
filter(Method == "DanQ") %>%
group_by(Spec) %>%
filter(Median_AUROC == max(Median_AUROC)) %>%
arrange(Spec)
write.csv(best_lr, "out_tables_R1/Sup_Tab3_best_LR_DanQ.csv", row.names = FALSE)
setwd('/Users/datn/research/DL_paper_final')
require(data.table)
require(ggplot2)
library(dplyr)
library(tidyr)
df = fread('out_tables/model_performance.csv')
df = as.data.frame(df)
df$LR = as.character(df$LR)
df$LR[df$LR == "0.001"] = "1e-03"
df$LR = factor(df$LR, levels = c("1e-03", "5e-04", "1e-04", "5e-05"))
## AUROC
auroc = ggplot(df, aes(x = LR, y = auroc, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUROC") +
scale_y_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2")
# Compute the median values
median_table_auroc <- df %>%
group_by(LR, Method, Spec) %>%
summarize(Median_AUROC = median(auroc, na.rm = TRUE)) %>%
arrange(LR, Spec, Method)
# Display the table
print(median_table_auroc)
wide_median_table_auroc <- median_table_auroc %>%
pivot_wider(names_from = Method, values_from = Median_AUROC) %>% arrange(Spec)
# Optionally save the table to a CSV file
write.csv(wide_median_table_auroc, "out_tables_R1/Sup_Tab1_median_auroc.csv", row.names = FALSE)
pdf("out_figs_R1/Fig2.pdf", width = 8, height = 5.5)
auroc
dev.off()
## AUPR
aupr = ggplot(df, aes(x = LR, y = aupr, fill = Method)) +
geom_boxplot() +
facet_wrap(~Spec) +
theme_light() +
labs(x = "Learning Rate",
y = "AUPR") +
scale_y_continuous() +
scale_fill_brewer(palette = "Set2")
# Compute the median values
median_table_aupr <- df %>%
group_by(LR, Method, Spec) %>%
summarize(Median_AUPR = median(aupr, na.rm = TRUE)) %>%
arrange(LR, Spec, Method)
# Display the table
print(median_table_aupr)
wide_median_table_aupr <- median_table_aupr %>%
pivot_wider(names_from = Method, values_from = Median_AUPR) %>% arrange(Spec)
# Optionally save the table to a CSV file
write.csv(wide_median_table_aupr, "out_tables_R1/Sup_Tab2_median_aupr.csv", row.names = FALSE)
### export figs
pdf("out_figs_R1/Sup_Fig1.pdf", width = 8, height = 5.5)
aupr
dev.off()
## Export best learning rates for DanQ
combine_tab = median_table_auroc
combine_tab$Median_AUPR = median_table_aupr$Median_AUPR
best_lr <- combine_tab %>%
filter(Method == "DanQ") %>%
group_by(Spec) %>%
filter(Median_AUROC == max(Median_AUROC)) %>%
arrange(Spec)
write.csv(best_lr, "out_tables_R1/Sup_Tab3_best_LR_DanQ.csv", row.names = FALSE)
filter_dataframe <- function(df, LR, Method, Spec) {
pick <- (df$LR == LR) & (df$Method == Method) & (df$Spec == Spec)
return(df[pick, ])
}
df_best <- rbind(
filter_dataframe(df, "5e-05", "DanQ", "Cattle"),
filter_dataframe(df, "1e-04", "DanQ", "Chicken"),
filter_dataframe(df, "5e-04", "DanQ", "Pig"),
filter_dataframe(df, "5e-05", "DanQ", "Salmon")
)
### AUC by track types
f2 = ggplot(df_best, aes(y = Type, x = auroc, fill = Type)) +
geom_violin(trim=FALSE) +
geom_boxplot(width=0.2, fill="white")+
facet_wrap(~Spec) +
theme_light() +
labs(x = "AUROC",
y = "Data type") +
scale_x_continuous(limits = c(0.5, 1)) +
scale_fill_brewer(palette = "Set2") +
theme(legend.position = "none")
pdf("out_figs_R1/Sup_Fig2.pdf", width = 8, height = 5.5)
f2
dev.off()
# ### AUPR by track types
# f3 = ggplot(df_best, aes(y = Type, x = aupr, fill = Type)) +
#   geom_violin(trim=FALSE) +
#   geom_boxplot(width=0.2, fill="white")+
#   facet_wrap(~Spec) +
#   theme_light() +
#   labs(x = "AUPR",
#        y = "Data type") +
#   scale_x_continuous() +
#   scale_fill_brewer(palette = "Set2") +
#   theme(legend.position = "none")
# pdf("out_figs/Sup_Fig3.pdf", width = 8, height = 5.5)
# f3
# dev.off()
